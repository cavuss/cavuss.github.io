<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/cavuss/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/cavuss/" rel="alternate" type="text/html" /><updated>2021-07-12T13:30:31+01:00</updated><id>http://localhost:4000/cavuss/feed.xml</id><title type="html">serkan</title><subtitle>Material theme based on &lt;a href=&quot;http://materializecss.com&quot;&gt;Materialize.css&lt;/a&gt; for jekyll sites
</subtitle><entry><title type="html">What is Platform Engineering</title><link href="http://localhost:4000/cavuss/2017/03/24/what-is-pe" rel="alternate" type="text/html" title="What is Platform Engineering" /><published>2017-03-24T17:30:13+00:00</published><updated>2017-03-24T17:30:13+00:00</updated><id>http://localhost:4000/cavuss/2017/03/24/what-is-pe</id><content type="html" xml:base="http://localhost:4000/cavuss/2017/03/24/what-is-pe">&lt;p&gt;Platform Engineering is a discipline which involves doing whatever it takes (both technical and non technical) to build, maintain and provide a curated platform experience for all the communities using it (Traditional Engineering Teams, Data Analysts &amp;amp; Scientists, Leadership &amp;amp; Governance).&lt;/p&gt;

&lt;p&gt;It’s not the same as DevOps. If you want to host a new website you need &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;DevOps&lt;/a&gt;. If you need a system for hosting websites, you need the &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Platform Engineer&lt;/a&gt;s.&lt;/p&gt;

&lt;p&gt;Infrastructure as Code (IaC) plays a part in a platform engineering team’s job. Instead of manually configuring infrastructure, IaC does it by speeding things up and reducing chances for error. The platform engineering team can create an API that lets application developers avoid having to know what IaC frameworks exist.&lt;/p&gt;

&lt;h3 id=&quot;patterns-underpinning-a-successful-platform-experience&quot;&gt;Patterns Underpinning A Successful Platform Experience&lt;/h3&gt;

&lt;p&gt;So for all of these communities, what does a successful platform experience look like, what does it feel like? And conversely, what does it look like when it all goes a bit wrong?&lt;/p&gt;

&lt;h4 id=&quot;clear-boundaries--responsibilities&quot;&gt;Clear Boundaries &amp;amp; Responsibilities&lt;/h4&gt;

&lt;p&gt;Teams need to understand what is required of them to be a good platform citizen, as well as where they have license to go off-piste and the conditions allowing that. A good platform engineering team will make it very obvious what is a platform responsibility vs that of the teams they serve. Drawing such lines in the sand early helps minimise frustration and also promotes better collaboration and a faster, efficient delivery of overall value.&lt;/p&gt;
&lt;h4 id=&quot;self-service--automation&quot;&gt;Self Service &amp;amp; Automation&lt;/h4&gt;

&lt;p&gt;End users want to have tools and platforms which provide freedom and independence to go as fast as they can delivering value to their end users. Innovation and experimentation is also encouraged when there is little to no friction from a platform team. That is why one of THE top wishes of platform end users is to have self service capabilities in the platform through a combination of clearly defined interfaces, tools and processes. And ideally, for this to be as automated as possible to make it reliable and fast.&lt;/p&gt;
&lt;h4 id=&quot;flexible--evolvable&quot;&gt;Flexible &amp;amp; Evolvable&lt;/h4&gt;

&lt;p&gt;It is understood platforms will be opinionated to some degree to help ensure order, as well as provide improved productivity and efficiency. But to be practically useful, platforms must be able to adapt to diverse community needs, including allowing for deviation where required. This means moving away from a one-size-fits-all approach to one which instead offers guardrails and guides (through templates, tooling etc). This helps steer engineers in the right direction, ensuring they don’t veer off track completely, but also doesn’t box them in unnecessarily either.&lt;/p&gt;
&lt;h4 id=&quot;reliable&quot;&gt;Reliable&lt;/h4&gt;

&lt;p&gt;If engineers and operational staff are going to run their solutions on your platform, they will expect the fundamental operations underpinning it to be rock solid. Confidence that low level plumbing activities such as auto scaling, and provisioning will “just work” (provided of course it’s configured correctly) is key to building confidence in both technical and management teams. This includes making appropriate tooling and dashboards available to help troubleshoot and diagnose issues - whether in development or production environments.&lt;/p&gt;</content><author><name></name></author><category term="default" /><category term="test" /><summary type="html">Platform Engineering is a discipline which involves doing whatever it takes (both technical and non technical) to build, maintain and provide a curated platform experience for all the communities using it (Traditional Engineering Teams, Data Analysts &amp;amp; Scientists, Leadership &amp;amp; Governance).</summary></entry><entry><title type="html">Syntax Highlighting Test</title><link href="http://localhost:4000/cavuss/2017/03/23/syntax-test" rel="alternate" type="text/html" title="Syntax Highlighting Test" /><published>2017-03-23T17:30:13+00:00</published><updated>2017-03-23T17:30:13+00:00</updated><id>http://localhost:4000/cavuss/2017/03/23/syntax-test</id><content type="html" xml:base="http://localhost:4000/cavuss/2017/03/23/syntax-test">&lt;p&gt;Jekyll uses Rouge by default for syntax highlighting, here are some tests.&lt;/p&gt;

&lt;p&gt;Ruby:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Python with line numbers:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hi, {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# prints 'Hi, Tom' to STDOUT.&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;C with line numbers:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hi, %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Tom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* prints 'Hi, Tom' to STDOUT. */&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="default" /><category term="test" /><category term="syntax" /><summary type="html">Jekyll uses Rouge by default for syntax highlighting, here are some tests.</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/cavuss/2017/03/22/welcome-to-jekyll" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2017-03-22T17:30:13+00:00</published><updated>2017-03-22T17:30:13+00:00</updated><id>http://localhost:4000/cavuss/2017/03/22/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/cavuss/2017/03/22/welcome-to-jekyll">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="Default" /><category term="test" /><category term="Test" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>